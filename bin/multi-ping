#!/usr/bin/env python

'Ping multiple hosts in parallel, output in JSON.'

from datetime import datetime
import errno
import json
import optparse
import os
import re
import subprocess
import sys
import time
import thread

datetime_format = '%Y-%m-%DT%H:%M:%S'


def main():
    optparser = optparse.OptionParser(usage='Usage: %s [options] hosts...')
    optparser.add_options([
        optparse.Option('-c', '--count', type='int'),
    ])
    opts, targets = optparser.parse_args()
    if not targets:
        optparser.error('One or more hosts needed')

    for target in targets:
        thread.start_new(ping_one, (opts, target))
    time.sleep(1)

    while True:
        try:
            os.wait()
        except OSError as exc:
            if exc.errno == errno.ECHILD:
                break
            raise


def ping_one(opts, target):
    argv = ['ping']
    if opts.count:
        argv.extend(['-c', str(opts.count)])
    argv.append(target)
    child = subprocess.Popen(
        argv,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )

    def output(**kwargs):
        msg = {
            'stamp': datetime.utcnow().strftime(datetime_format),
            'target': target,
        }
        msg.update(**kwargs)
        print(json.dumps(msg))

    expected_seq = 1
    for line in iter(lambda: child.stdout.readline(), None):
        line = line.strip()

        for action, pattern in patterns:
            match = pattern.match(line)
            if not match:
                continue
            break
        else:
            msg.update({
                'error': 'Unknown output from ping',
                'line': line,
            })

        if action == 'answer':
            seq = int(match.groupdict()['seq'])
            if seq < expected_seq:
                output(what='out-of-order', error='out-of-order sequence-number')
            elif seq > expected_seq:
                count = seq - expected_seq
                output(
                    what='lost',
                    error='%d packets lost' % count,
                    count=count,
                )
            expected_seq = seq + 1

        if action == 'ignore':
            continue
        else:
            msg = match.groupdict()
            msg['what'] = action
        output(**msg)


patterns = [
    ('ignore', re.compile('^PING .* bytes of data\\.$')),
    ('answer', re.compile(
        '^(?P<bytes>\d+) bytes from .*: '
        'icmp_seq=(?P<seq>\d+) ttl=(?P<ttl>\d+) time=(?P<time>.*) ms$'
    )),
]


if __name__ == '__main__':
    main()
